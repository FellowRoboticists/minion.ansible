#!/bin/bash
#
# This module provides tools for working with NVM

# The arguments to the script are passed as a file
# containing name value pairs
args=$(cat $1 | sed 's/,//g')
eval $args

successResponse() {
  message=$1
  changed=$2

  echo "{ \"result\" : \"${message}\", \"changed\" : ${changed} }"
}

failureResponse() {
  message=$1

  echo "{ \"failed\" : true, \"msg\" : \"${message}\" }"

  return 1
}

response() {
  error_code=$1
  success_message=$2
  failure_message=$3
  changed=$4

  if [ $error_code == 0 ]
  then
    successResponse "$2" $4
  else
    failureResponse "$3"
  fi

  return ${error_code}
}

installNVM() {
  if [ -d ~/.nvm ]
  then
    successResponse "NVM already installed" false
    return 0
  else
    curl -s -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.4/install.sh | bash > /dev/null 2>&1
    response $? "Installed NVM", "Error installing NVM" true
    return $?
  fi
}

installNode() {
  node_version=$1

  if [ ! -d ~/.nvm ]
  then
    failureResponse "NVM is not installed"
    return 1
  fi

  if [ -z "$node_version" ]
  then
    failureResponse "No node version specified"
    return 1
  fi

  source ~/.nvm/nvm.sh > /dev/null 2>&1 && nvm exec ${node_version} node -e 'console.log("test")' > /dev/null 2>&1
  if [ $? == 0 ]
  then
    successResponse "Node ${node_version} already installed", false
    return 0
  fi

  source ~/.nvm/nvm.sh > /dev/null 2>&1 && nvm install ${node_version} > /tmp/install_node.log 2>&1
  response \
    $? \
    "Node ${node_version} successfully installed" \
    "Error installing node ${node_version}" \
    true

  return $?
}

copyNodeToRoot() {
  local version=$1

  # Get the path to the NVM node we want to copy
  source ~/.nvm/nvm.sh > /dev/null 2>&1 && export nodeLocation=$(nvm which ${version})

  # Tease out just the base path
  nodePath=${nodeLocation%/bin/node}

  # Copy the bin, lib and share directories to the user local node.
  cp -r ${nodePath}/{bin,lib,share} /usr/local/node

  response \
    $? \
    "Node ${version} successfully copied" \
    "Error copying node ${version}" \
    true

  return $?
}

installGlobalNPMPackage() {
  local version=$1
  local packageName=$2

  # Install the package only if it isn't already there
  pkgExist=$(source ~/.nvm/nvm.sh > /dev/null 2>&1 && nvm exec $version npm list -g $packageName 2> /dev/null | grep $packageName)

  if [ -z "$pkgExist" ]
  then
    source ~/.nvm/nvm.sh > /dev/null 2>&1 && nvm exec $version npm install -g $packageName > /dev/null 2>&1

    response \
      $? \
      "Global NPM package '$packageName' installed." \
      "Error installing NPM package '$packageName'." \
      true
  else
    successResponse "Global package '$packageName' already installed" false
  fi
}

case "$action" in
  install)
    installNVM
    ;;
  setup)
    installNode $node_version
    ;;
  copy)
    copyNodeToRoot $node_version
    ;;
  npm_global)
    installGlobalNPMPackage $node_version $package
    ;;
  *)
    failureResponse "Invalid action specified"
    ;;
esac

exit $?
